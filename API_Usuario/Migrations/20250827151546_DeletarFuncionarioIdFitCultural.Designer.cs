// <auto-generated />
using System;
using API_Usuario.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Usuario.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20250827151546_DeletarFuncionarioIdFitCultural")]
    partial class DeletarFuncionarioIdFitCultural
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API_Usuario.Models.Acompanhamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Adaptabilidade")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Avaliador")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Comunicacao")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Confirmacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Plano")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prazos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Proatividade")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Produtividade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Qualidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("TrabalhoEquipe")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Treinamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Acompanhamentos");
                });

            modelBuilder.Entity("API_Usuario.Models.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("API_Usuario.Models.DadosGraficoAnual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QtdeAdmitidos")
                        .HasColumnType("int");

                    b.Property<int>("QtdeDesligados")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GraficosAnuais");
                });

            modelBuilder.Entity("API_Usuario.Models.Desligamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataDesligamento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FeedDesligamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MotivoDesligamentoId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("isGrave")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("MotivoDesligamentoId");

                    b.ToTable("Desligamentos");
                });

            modelBuilder.Entity("API_Usuario.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Complemento")
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("API_Usuario.Models.FitCultural", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("FitCulturals");
                });

            modelBuilder.Entity("API_Usuario.Models.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CargoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataAdmi")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataDemi")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataNasci")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("SetorId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("SetorId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("API_Usuario.Models.Grafico<int>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DadosGraficoAnualId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DadosGraficoAnualId1")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DadosGraficoAnualId2")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DadosGraficoAnualId3")
                        .HasColumnType("char(36)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DadosGraficoAnualId");

                    b.HasIndex("DadosGraficoAnualId1");

                    b.HasIndex("DadosGraficoAnualId2");

                    b.HasIndex("DadosGraficoAnualId3");

                    b.ToTable("Grafico<int>");
                });

            modelBuilder.Entity("API_Usuario.Models.Grafico<string>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DadosGraficoAnualId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Valor")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DadosGraficoAnualId");

                    b.ToTable("Grafico<string>");
                });

            modelBuilder.Entity("API_Usuario.Models.MotivoDesligamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MotivoDesligamentos");
                });

            modelBuilder.Entity("API_Usuario.Models.Setor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Setores");
                });

            modelBuilder.Entity("API_Usuario.Models.Acompanhamento", b =>
                {
                    b.HasOne("API_Usuario.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("API_Usuario.Models.Desligamento", b =>
                {
                    b.HasOne("API_Usuario.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Usuario.Models.MotivoDesligamento", "MotivoDesligamento")
                        .WithMany()
                        .HasForeignKey("MotivoDesligamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("MotivoDesligamento");
                });

            modelBuilder.Entity("API_Usuario.Models.FitCultural", b =>
                {
                    b.HasOne("API_Usuario.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("API_Usuario.Models.Funcionario", b =>
                {
                    b.HasOne("API_Usuario.Models.Cargo", "Cargo")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Usuario.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Usuario.Models.Setor", "Setor")
                        .WithMany("Funcionarios")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Endereco");

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("API_Usuario.Models.Grafico<int>", b =>
                {
                    b.HasOne("API_Usuario.Models.DadosGraficoAnual", null)
                        .WithMany("DadosTurnover")
                        .HasForeignKey("DadosGraficoAnualId");

                    b.HasOne("API_Usuario.Models.DadosGraficoAnual", null)
                        .WithMany("DesligamentosPorCargos")
                        .HasForeignKey("DadosGraficoAnualId1");

                    b.HasOne("API_Usuario.Models.DadosGraficoAnual", null)
                        .WithMany("DesligamentosPorSetor")
                        .HasForeignKey("DadosGraficoAnualId2");

                    b.HasOne("API_Usuario.Models.DadosGraficoAnual", null)
                        .WithMany("MotivosDeDesligamento")
                        .HasForeignKey("DadosGraficoAnualId3");
                });

            modelBuilder.Entity("API_Usuario.Models.Grafico<string>", b =>
                {
                    b.HasOne("API_Usuario.Models.DadosGraficoAnual", null)
                        .WithMany("Meses")
                        .HasForeignKey("DadosGraficoAnualId");
                });

            modelBuilder.Entity("API_Usuario.Models.Cargo", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("API_Usuario.Models.DadosGraficoAnual", b =>
                {
                    b.Navigation("DadosTurnover");

                    b.Navigation("DesligamentosPorCargos");

                    b.Navigation("DesligamentosPorSetor");

                    b.Navigation("Meses");

                    b.Navigation("MotivosDeDesligamento");
                });

            modelBuilder.Entity("API_Usuario.Models.Setor", b =>
                {
                    b.Navigation("Funcionarios");
                });
#pragma warning restore 612, 618
        }
    }
}
